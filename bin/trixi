#!/bin/bash

# This file uses the method outlined in [1] to pass additional arguments to the
# `julia` executable (in this case: enable colored output). The approach should
# work portably on all UNIX-like operating systems.
#
# NOTE TO WINDOWS USERS: Just invoke `bin/trixi` explicitly with the `julia` executable.
#
# [1]: https://docs.julialang.org/en/v1/manual/faq/#How-do-I-pass-options-to-julia-using-#!/usr/bin/env?-1

#=
# Check if '-i' or '--interactive' was passed as an argument
interactive=0
for arg in "$@"; do
  if [ "$arg" = "-i" ] || [ "$arg" = "--interactive" ]; then
    interactive=1
  fi
done

# Get directory of script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_DIR="$(dirname \"$dir\")"

# If not interactive, just run script as usual. Otherwise load REPL
if [ $interactive -eq 0 ]; then
  exec julia --color=yes \
      -e 'include(popfirst!(ARGS))' "${BASH_SOURCE[0]}" "$@"
else
  exec julia --banner=no -i \
      -e 'push!(LOAD_PATH, ".")' \
      -e 'println("First, execute `using Revise; import Trixi` to load Trixi while tracking changes to its files.")' \
      -e 'println("Then you can start a Trixi simulation by running `Trixi.run(parameters_file=\"parameters.toml\")`.\n")'
fi
=#

# Load Trixi
include("../src/Trixi.jl")

# Run Trixi but handle user interrupts gracefully (Ctrl-c)
@Trixi.Auxiliary.interruptable Trixi.run(args=ARGS)
